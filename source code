import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.metrics import mean_squared_error
import math

# Load data
df = pd.read_csv("aapl.csv")
df["Date"] = pd.to_datetime(df["Date"])
df = df.sort_values("Date")

# Use only the 'Adj Close' column
data = df[["Adj Close"]].values

# Normalize data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Prepare training data (80% train, 20% test)
training_data_len = int(np.ceil(len(scaled_data) * 0.8))

# Create training sequences
sequence_length = 60
train_data = scaled_data[:training_data_len]

x_train = []
y_train = []

for i in range(sequence_length, len(train_data)):
    x_train.append(train_data[i-sequence_length:i, 0])
    y_train.append(train_data[i, 0])

x_train = np.array(x_train)
y_train = np.array(y_train)

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

# Build LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(units=50))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(x_train, y_train, batch_size=64, epochs=20)

# Prepare test data
test_data = scaled_data[training_data_len - sequence_length:]
x_test = []
y_test = data[training_data_len:]

for i in range(sequence_length, len(test_data)):
    x_test.append(test_data[i-sequence_length:i, 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Evaluate the model
rmse = math.sqrt(mean_squared_error(y_test, predictions))
print(f"Root Mean Squared Error: {rmse:.2f}")

# Plot results
train = df[:training_data_len]
valid = df[training_data_len:]
valid["Predictions"] = predictions

plt.figure(figsize=(14, 6))
plt.title("AAPL Stock Price Prediction")
plt.xlabel("Date")
plt.ylabel("Adjusted Close Price")
plt.plot(train["Date"], train["Adj Close"], label="Training")
plt.plot(valid["Date"], valid["Adj Close"], label="Actual")
plt.plot(valid["Date"], valid["Predictions"], label="Predicted")
plt.legend()
plt.grid(True)
plt.show()
